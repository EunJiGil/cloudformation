Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: container-devsecops-wksp

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  BucketName:
    Type: String
    Default: sa-security-specialist-workshops-us-east-2
    Description: Source bucket for workshop CloudFormation yaml's

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - 
        Label: 
          default: "Resource and Notification Configuration"
        Parameters: 
          - "container-devsecops-wksp"
      - 
        Label: 
          default: "Fail Pipeline Threshold"
        Parameters: 
          - "High"

    ParameterLabels: 
      ResourceName:
        default: "Resource Prefix"
      FailWhen:
        default: "Fail When"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC


### nested
  ### Cloud9 IDE
  Cloud9IDE:
    Type: AWS::Cloud9::EnvironmentEC2
    DependsOn: PublicSubnet1
    Properties:
      Description: This is the IDE you will be using to complete the Container DevSecOps workshop.
      InstanceType: t2.small
      Name: !Join [ '-', [ !Ref EnvironmentName, 'ide'  ] ]
      SubnetId: !Ref PublicSubnet1

  ### Anchore ECR Repository
  AnchoreRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Join [ '-', [ !Ref EnvironmentName, 'anchore'  ] ]

  AnchoreCodeBuildRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: AnchoreCodeBuildRole
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - codebuild.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: ServicePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListObject
                Resource: '*'

  AnchoreCodeBuild:
    Type: AWS::CodeBuild::Project
    DependsOn: AnchoreRepository
    Properties: 
      Artifacts: 
        Type:
          NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        ImagePullCredentialsType: CODEBUILD
        EnvironmentVariables:
          - Name: IMAGE
            Value: !Sub
              - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repo}
              - { Repo: !Ref AnchoreRepository}
      Name: !Join [ '-', [ !Ref EnvironmentName, 'anchore', 'build'  ] ]
      ServiceRole: !GetAtt AnchoreCodeBuildRole.Arn
      Source: 
        Type: S3
        Location: !Join [ '/', [ !Ref BucketName, 'devsecops/containers/anchore-build.zip'  ] ]
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
                python: 3.7
            pre_build: 
              commands:
                - rm -f /etc/apt/sources.list.d/sbt.list
                - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
                - apt-get update && apt-get install -y python-dev
                - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py  
                - python get-pip.py
                - pip install awscli
                - $(aws ecr get-login --no-include-email)
            build: 
              commands:
                - docker build $CODEBUILD_SRC_DIR -t $IMAGE
                - docker push $IMAGE

  CodeBuildStarter:
    Type: Custom::CodeBuildStarter
    Properties:
        ServiceToken: !GetAtt CodeBuildStarterLambda.Arn
        ProjectName: !Ref AnchoreCodeBuild

  CodeBuildStarterLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: CodeBuildStarterLambdaRole
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: Policy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - codebuild:*
                Resource: '*'

  CodeBuildStarterLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild', 'starter'  ] ]
      Role: !GetAtt CodeBuildStarterLambdaRole.Arn
      Runtime: python3.7
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import boto3
          from botocore.vendored import requests

          codebuild_client = boto3.client('codebuild')

          def handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      response = codebuild_client.start_build(
                        projectName=event['ResourceProperties']['ProjectName']
                      )
                      send(event, context, "SUCCESS")
                  elif event['RequestType'] == 'Update':
                      response = codebuild_client.start_build(
                        projectName=event['ResourceProperties']['ProjectName']
                      )
                      send(event, context, "SUCCESS")
                  elif event['RequestType'] == 'Delete':
                      send(event, context, "SUCCESS")
                  else:
                      send(event, context, "FAILED")
              except:
                  send(event, context, "FAILED")
          
          def send(event, context, responseStatus):
            responseUrl = event['ResponseURL']

            print(responseUrl)

            responseBody = {}
            responseBody['Status'] = responseStatus
            responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
            responseBody['PhysicalResourceId'] = context.log_stream_name
            responseBody['StackId'] = event['StackId']
            responseBody['RequestId'] = event['RequestId']
            responseBody['LogicalResourceId'] = event['LogicalResourceId']

            json_responseBody = json.dumps(responseBody,
              indent=4,
              sort_keys=True,
              default=str)

            print("Response body:\n" + json_responseBody)

            headers = {
                'content-type' : '',
                'content-length' : str(len(json_responseBody))
            }

            try:
                response = requests.put(responseUrl,
                                        data=json_responseBody,
                                        headers=headers)
                print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing requests.put(..): " + str(e))

  dbPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludePunctuation: True

  AdminPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludePunctuation: True

  Cluster:
    Type: AWS::ECS::Cluster
    DependsOn: PublicSubnet1
    # DependsOn: EcsSlr

  AnchoreTaskTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                !Join
                  - ""
                  - - ecs-tasks.
                    - !Ref AWS::URLSuffix
        Version: 2012-10-17

  AnchoreTaskTaskRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: AnchoreTaskTaskRoleDefaultPolicy
      Roles:
        - !Ref AnchoreTaskTaskRole
  
  TaskLoggingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      # LogGroupName: !Join [ '', [ '/aws/ecs/task',!Ref EnvironmentName, '-anchore-engine'  ] ]
      RetentionInDays: 365
    DeletionPolicy: Retain

  AnchoreTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - !Ref AWS::URLSuffix
        Version: 2012-10-17

  AnchoreTaskExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource: "*"
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              !GetAtt
                - TaskLoggingLogGroup
                - Arn
        Version: 2012-10-17
      PolicyName: AnchoreTaskExecutionRoleDefaultPolicy
      Roles:
        - !Ref AnchoreTaskExecutionRole

  AnchoreTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: ANCHORE_DB_PASSWORD
              Value:
                !Join
                  - ""
                  - - "{{resolve:secretsmanager:"
                    - !Ref dbPassword
                    - ::::}}
            - Name: ANCHORE_ADMIN_PASSWORD
              Value:
                !Join
                  - ""
                  - - "{{resolve:secretsmanager:"
                    - !Ref AdminPassword
                    - ::::}}
            - Name: ANCHORE_DB_HOST
              Value: 127.0.0.1
          Essential: True
          Image: !Sub
            - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repo}
            - { Repo: !Ref AnchoreRepository}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLoggingLogGroup
              awslogs-stream-prefix: Anchore
              awslogs-region:
                Ref: AWS::Region
          Name: AnchoreContainer
          PortMappings:
            - ContainerPort: 8228
              Protocol: tcp
        - Environment:
            - Name: POSTGRES_PASSWORD
              Value:
                !Join
                  - ""
                  - - "{{resolve:secretsmanager:"
                    - !Ref dbPassword
                    - ::::}}
          Essential: True
          Image: postgres
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLoggingLogGroup
              awslogs-stream-prefix: AnchoreDb
              awslogs-region:
                Ref: AWS::Region
          Name: postgres
          PortMappings:
            - ContainerPort: 5432
              Protocol: tcp
      Cpu: "1024"
      ExecutionRoleArn:
        !GetAtt
          - AnchoreTaskExecutionRole
          - Arn
      Family: AnchoreFargateTask
      Memory: "6144"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        !GetAtt
          - AnchoreTaskTaskRole
          - Arn
    DependsOn: 
      - CodeBuildStarter

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Security Group for ELB
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VPC

  LB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: LBSecurityGroup
    Properties:
      LoadBalancerAttributes: []
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt 
            - LBSecurityGroup
            - GroupId
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2 ]
      Type: application

  AnchoreFargateServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AnchoreFargateService/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress: []
      VpcId: !Ref VPC

  LBSecurityGrouptoAnchoreFargateServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        !GetAtt
          - LBSecurityGroup
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        !GetAtt
          - AnchoreFargateServiceSecurityGroup
          - GroupId
      FromPort: 8228
      ToPort: 8228

  LBPublicListenerECSGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckPort: "8228"
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: 200,404
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      TargetType: ip
      VpcId: !Ref VPC

  LBPublicListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: LBPublicListenerECSGroup
          Type: forward
      LoadBalancerArn: !Ref LB
      Port: 80
      Protocol: HTTP
      Certificates: []

  AnchoreFargateService:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref AnchoreTask
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: AnchoreContainer
          ContainerPort: 8228
          TargetGroupArn: !Ref LBPublicListenerECSGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt
                - AnchoreFargateServiceSecurityGroup
                - GroupId
          Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
    DependsOn:
      - LBPublicListener
  
  AnchoreFargateServiceSecurityGroupfromAnchoreFargateCdkStackLBSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8228
      GroupId:
        !GetAtt
          - AnchoreFargateServiceSecurityGroup
          - GroupId
      SourceSecurityGroupId:
        !GetAtt
          - LBSecurityGroup
          - GroupId
      ToPort: 8228

  SendFindingsLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: SendFindingsLambdaRole
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: Policy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - securityhub:BatchImportFindings
                Resource: '*'

  Boto3LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: boto3-layer
      Content:
        S3Bucket: sa-security-specialist-workshops-us-east-2
        S3Key: devsecops/layers/boto3.zip
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: Available under the MIT-0 license.

  SendFindingsLambda: 
    Type: AWS::Lambda::Function
    Properties:
      Layers:
        - !Ref Boto3LambdaLayer
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'sendfindings', 'securityhub'  ] ]
      Description: Sends payload with vulnerabilities findings to Security Hub
      Handler: index.lambda_handler
      Role: !GetAtt SendFindingsLambdaRole.Arn
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import traceback
          import os
          import uuid
          import datetime
          from enum import Enum
          from itertools import zip_longest

          client = boto3.client('securityhub')
          account_id = os.environ['ACCOUNT_ID']
          region = os.environ['REGION']
          uuid = str(uuid.uuid4())

          def chunker(seq, size):
              """Chunk it up"""
              return (seq[pos:pos + size] for pos in range(0, len(seq), size))

          class Severity(Enum):
              NONE = 0
              UNKNOWN = 0
              LOW =  39
              NEGLIGIBLE = 39
              MEDIUM = 69
              HIGH = 89
              CRITICAL = 100

          def lambda_handler(event, context):
              """Get the results of the scan and send them to Security Hub"""
              if 'vulnerabilities' in event:

                  # product arn format arn:aws:securityhub:us-west-2:123456789012:product/123456789012/default
                  product_arn = "arn:aws:securityhub:{0}:{1}:product/{2}/default".format(
                      region,
                      account_id,
                      account_id
                  )

                  image_id = event['image_id']
                  image_arn = event['image_arn']
                  curr_time = datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc).isoformat()
                  
                  for group in chunker(event['vulnerabilities'], 100):
                      findings = []
                      i = 0
                      for vuln in group:
                          finding = {
                              'SchemaVersion': '2018-10-08',
                              'Id': '{0}-{1}-{2}'.format(image_id,
                                  vuln['vuln'],
                                  str(i)),
                              'ProductArn': product_arn,
                              'ProductFields': {
                                'ProviderName': 'Anchore',
                                'ProviderVersion': 'v0.8.2',
                              },
                              'GeneratorId': uuid,
                              'AwsAccountId': account_id,
                              'Types': [
                                  "Software and Configuration Checks/Vulnerabilities/CVE"
                              ],
                              'CreatedAt': curr_time,
                              'UpdatedAt': curr_time,
                              'Severity': {
                                  'Normalized': Severity[vuln['severity'].upper()].value
                              },
                              'Title': 'Vulnerability {0} found in {1}'.format(vuln['vuln'],
                                  image_id),
                              'Description': 'Vulnerability {0} found in {1} for {2}'.format(vuln['vuln'],
                                  vuln['package'],
                                  image_id),
                              'SourceUrl': vuln['url'],
                              'Resources': [
                                  {
                                      'Type': 'Container',
                                      'Id': image_arn,
                                      'Details': {
                                          'Container': {
                                              'ImageId': image_id,
                                          }
                                      }
                                  }
                              ],
                              'Remediation': {
                                  'Recommendation': {
                                      'Text': 'Update {0} to version {1}'.format(vuln['package'],
                                                                                  vuln['fix'])
                                  }
                              },
                              'UserDefinedFields': {
                                  'feedGroup': vuln['feed_group'],
                                  'package': vuln['package'],
                                  'packageType': vuln['package_type'],
                                  'severity': vuln['severity'],
                              }
                          }
                          findings.append(finding)
                          i += 1

                      # Report the chunk of findings
                      client.batch_import_findings(Findings=findings)
      Runtime: python3.7
      Timeout: 300






## nested
  ################### Repo Resources ###################

  ### Application Repository
  AppRepository: 
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Sample application repository to support the container devsecops workshop.
      RepositoryName: !Join [ '-', [ !Ref EnvironmentName, 'app'  ] ]
  
  ### Configuration Repository
  ConfigRepository: 
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Configuration repository to support the container devsecops workshop.
      RepositoryName: !Join [ '-', [ !Ref EnvironmentName, 'config'  ] ]

  ### Initial commit to sample application - Custom resource
  RepositoryInitialCommit:
    DependsOn: 
      - AppRepository
      - ConfigRepository
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt 'LambdaRepositoryInitialCommit.Arn'
      Repo: !Join [ '-', [ !Ref EnvironmentName, 'app'  ] ]
      RepoConfig: !Join [ '-', [ !Ref EnvironmentName, 'config'  ] ]

  ### Initial commit to sample application - Lambda Role
  LambdaRepositoryInitialCommitRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref EnvironmentName, 'lambda', 'initial-commit'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: InitialCommitPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                Resource: '*'

  ### Initial commit to sample application - Lambda
  LambdaRepositoryInitialCommit: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'initial-commit'  ] ]
      Handler: "initial-commit.handler"
      Description: "Creates initial commits to respository."
      Role: !GetAtt 'LambdaRepositoryInitialCommitRole.Arn'
      Code: 
        S3Bucket: !Ref BucketName
        S3Key: 'devsecops/containers/initial-commit.zip'
      Runtime: "python2.7"
      Timeout: "35"
  
  ### ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Join [ '-', [ !Ref EnvironmentName, 'sample'  ] ]

  ### Scratch ECR repository
  ScratchRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Join [ '-', [ !Ref EnvironmentName, 'scratch'  ] ]

  ### Feedback Loop - Pull Request
  PREventRuleRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref EnvironmentName, 'cloudwatch', 'pr'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: PRPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codepipeline:*
                Resource: '*'

  PREventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'pr'  ] ]
      Description: "Trigger notifications based on CodeCommit Pull Requests"
      EventPattern:
        source:
          - "aws.codecommit"
        detail-type:
          - "CodeCommit Pull Request State Change"
        resources:
          - !GetAtt AppRepository.Arn
        detail:
          event:
            - "pullRequestSourceBranchUpdated"
            - "pullRequestCreated"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaPR.Arn
          Id: !Join [ '-', [ !Ref EnvironmentName, 'pr'  ] ]

  LambdaPRCommentRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref EnvironmentName, 'lambda', 'pr'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: PRPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                  - codebuild:*
                  - codepipeline:StartPipelineExecution
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - ssm:DeleteParameters
                Resource: '*'

  LambdaPR: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'pr'  ] ]
      Description: "Adds an initial comment to the pull request."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref EnvironmentName
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import datetime
          import boto3
          import os

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          codepipeline = boto3.client('codepipeline')

          # Pipeline Name
          pipeline = '%s-pipeline' % os.environ['PREFIX']

          def handler(event, context):
            # Log event
            print(event)

            # Pull request Event
            if event['detail']['event'] in ['pullRequestSourceBranchUpdated', 'pullRequestCreated']:
              
              # Set variables
              pull_request_id = event['detail']['pullRequestId']
              repository_name = event['detail']['repositoryNames'][0]
              source_commit = event['detail']['sourceCommit']
              destination_commit = event['detail']['destinationCommit']

              # Write commit details to SSM
              ssm.put_parameter(
                Name='prid',
                Description='Pull Request ID',
                Value=pull_request_id,
                Overwrite=True,
                Type='String'
              )

              ssm.put_parameter(
                Name='repo',
                Description='Repository Name',
                Value=repository_name,
                Overwrite=True,
                Type='String'
              )

              ssm.put_parameter(
                Name='sourceCommit',
                Description='Source Commit',
                Value=source_commit,
                Overwrite=True,
                Type='String'
              )

              ssm.put_parameter(
                Name='destinationCommit',
                Description='Destination Commit',
                Value=destination_commit,
                Overwrite=True,
                Type='String'
              )

              # Add comments to PR
              codecommit_client.post_comment_for_pull_request(
                pullRequestId = pull_request_id,
                repositoryName = repository_name,
                beforeCommitId = source_commit,
                afterCommitId = destination_commit,
                content = '**Build started at {}.  Starting security testing.**'.format(datetime.datetime.utcnow().time())
              )

              codepipeline.start_pipeline_execution(
                name=pipeline,
              )
            
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaPR:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'pr'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt PREventRule.Arn

  ################### FEEDBACK LOOPS ###################

  ### Feedback Loop - Dockerfile Analysis CodeBuild

  CBDFEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-dockerfile'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the static analysis of the Dockerfile."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildDFProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBDF.Arn
          Id: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-dockerfile'  ] ]

  LambdaCBDF: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-dockerfile'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the Dockerfile static analysis codebuild."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref EnvironmentName
          CODEBUILDDFPROJECT: !Ref CodeBuildDFProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          dfproject = os.environ['CODEBUILDDFPROJECT']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            build_results = ssm.get_parameter(
              Name='codebuild-dockerfile-results'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            if event['detail']['project-name'] in [dfproject]:
              build_results = json.loads(build_results['Parameter']['Value'])
              # Add Errors
              errors = '## Static Analysis - Dockerfile Configuration (using Hadolint)\n'
              if not build_results:
                errors = errors + 'No Misconfigurations!'
              else:
                for i in build_results:
                  errors = errors + '* **%s** (%s): %s \n' % (i['code'], i['level'], i['message'])
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )

            ssm.delete_parameter(
              Name='codebuild-dockerfile-results'
            )
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBDF:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-dockerfile'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBDFEventRule.Arn

  ### Feedback Loop - Secrets Scanning CodeBuild

  CBSCEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-secrets'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the secrets analysis."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildSecretsProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBSC.Arn
          Id: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-secrets'  ] ]

  LambdaCBSC: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-secrets'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the secrets analysis codebuild."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref EnvironmentName
          CODEBUILDSCPROJECT: !Ref CodeBuildSecretsProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          scproject = os.environ['CODEBUILDSCPROJECT']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            if event['detail']['project-name'] in [scproject]:
              
              # Add Errors
              errors = '## Static Analysis - Secrets Scanning  (using truffleHog)\n'
              if event['detail']['build-status'] == 'SUCCEEDED':
                errors = errors + 'No secrets found!'
              else:
                errors = errors + 'Secrets found! Please review the logs and remove any sensitive data.'
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBSC:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-secrets'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBSCEventRule.Arn
  
  ### Feedback Loop - Vunerability Scanning CodeBuild

  CBVCEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-vulnerability'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the vulnerability scanning."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildVulnProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBVC.Arn
          Id: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-vulnerability'  ] ]

  LambdaCBVC: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-vulnerability'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the vulnerability scanning codebuild."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref EnvironmentName
          CODEBUILDVCPROJECT: !Ref CodeBuildVulnProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          vcproject = os.environ['CODEBUILDVCPROJECT']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            sec_hub = 'https://%s.console.aws.amazon.com/securityhub/' % event['region'] 
            if event['detail']['project-name'] in [vcproject]:
              # Add Errors
              errors = '## Vulnerability Scanning (using Anchore)\n'
              if event['detail']['build-status'] == 'SUCCEEDED':
                errors = errors + 'No vulnerabilities that meet or exceed the threshold!  Please manage all other vulnerabilities in [Security Hub](%s).' % sec_hub
              else:
                errors = errors + 'Findings found! Please review the logs and fix the vulnerabilities.'
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBVC:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-vulnerability'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBVCEventRule.Arn
  
  ### Feedback Loop - Publish Image

  CBPUEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-publish'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the Build and Push Stage."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildPublishProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBPU.Arn
          Id: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-publish'  ] ]

  LambdaCBPU: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-publish'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the publish codebuild project."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref EnvironmentName
          CODEBUILDPUPROJECT: !Ref CodeBuildPublishProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          puproject = os.environ['CODEBUILDPUPROJECT']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            sec_hub = 'https://%s.console.aws.amazon.com/securityhub/' % event['region'] 
            if event['detail']['project-name'] in [puproject]:
              errors = '## Image Build and Push\n'
              if event['detail']['build-status'] == 'SUCCEEDED':
                errors = errors + 'Image has successfully been published to the [AWS ECR repository](https://us-east-2.console.aws.amazon.com/ecr/repositories/container-devsecops-wksp-sample/).  The Pull Request has been merged and closed.'
              else:
                errors = errors + 'Image has failed to build.  Please review the logs'
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )

            # Merge Pull Request
            codecommit_client.merge_pull_request_by_fast_forward(
              pullRequestId=pull_request_id['Parameter']['Value'],
              repositoryName=repository_name['Parameter']['Value']
            )

            # Delete pipeline parameters
            ssm.delete_parameters(
              Names=[
                  'prid',
                  'repo',
                  'sourceCommit',
                  'destinationCommit'
              ]
            )
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBPU:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild-publish'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBPUEventRule.Arn

  ################### Pipeline ###################

  ### CodePipeline - Artifact Bucket
  PipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Join [ '-', [ !Ref EnvironmentName, !Ref "AWS::AccountId", !Ref "AWS::Region", 'artifacts'  ] ]

  ### CodePipeline - Service Role
  CodePipelineRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref EnvironmentName, 'codepipeline', 'service'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - codepipeline.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: ServicePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListObject
                Resource: [!Join [ '', [ !GetAtt 'PipelineBucket.Arn', '/*'  ] ], !GetAtt 'PipelineBucket.Arn' ]
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: '*'
  
  ### CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      RoleArn: !GetAtt 'CodePipelineRole.Arn'
      Name: !Join [ '-', [ !Ref EnvironmentName, 'pipeline'  ] ]
      Stages:
        - Name: PullRequest
          Actions:
            - Name: AppSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: "AppSource"
              Configuration:
                BranchName: "development"
                RepositoryName: !Join [ '-', [ !Ref EnvironmentName, 'app'  ] ]
                PollForSourceChanges: false
              RunOrder: 1
            - Name: ConfigSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: "ConfigSource"
              Configuration:
                BranchName: "master"
                RepositoryName: !Join [ '-', [ !Ref EnvironmentName, 'config'  ] ]
                PollForSourceChanges: false
              RunOrder: 1
        - Name: 'StaticAnalysis-DockerfileConfiguration'
          Actions:
            - Name: Validation
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "DFAppSourceOutput"
                - Name: "DFConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildDFProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1
        - Name: 'StaticAnalysis-Secrets'
          Actions:
            - Name: Validation
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "SecretsAppSourceOutput"
                - Name: "SecretsConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildSecretsProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1
        - Name: 'VulnerabilityAnalysis'
          Actions:
            - Name: VulnerabilityScan
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "VulnAppSourceOutput"
                - Name: "VulnConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildVulnProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1
        - Name: 'PublishImage'
          Actions:
            - Name: Build
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "PushAppSourceOutput"
                - Name: "PushConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildPublishProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1

  ################### CodeBuild Projects ###################

  #### CodeBuild Dockerfile Analysis ####

  ### CodeBuild Service Role
  CodeBuildRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref EnvironmentName, 'codebuild', 'service'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - codebuild.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: ServicePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource: !GetAtt 'SendFindingsLambda.Arn'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListObject
                Resource: [!Join [ '', [ !GetAtt 'PipelineBucket.Arn', '/*'  ] ], !GetAtt 'PipelineBucket.Arn' ]

  ### CodeBuild Project - Dockerfile Analysis
  CodeBuildDFProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
      Name: !Join [ '-', [ !Ref EnvironmentName, 'build', 'dockerfile'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec_dockerfile.yml

  #### CodeBuild Project - Secrets Analysis ####
  CodeBuildSecretsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: APP_REPO_URL
            Type: PLAINTEXT
            Value: !GetAtt AppRepository.CloneUrlHttp
      Name: !Join [ '-', [ !Ref EnvironmentName, 'build', 'secrets'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec_secrets.yml

  #### CodeBuild Project - Vulnerability Scanning ####
  CodeBuildVulnProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        # aws/codebuild/standard:5.0
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: FAIL_WHEN
            Type: PLAINTEXT
            Value: "Fail When"
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Ref ScratchRepository
          - Name: IMAGE_ARN
            Type: PLAINTEXT
            Value: !GetAtt ECRRepository.Arn
          - Name: FUNCTION_ARN
            Value: !GetAtt SendFindingsLambda.Arn
          - Name: ANCHORE_CLI_URL
            Type: PLAINTEXT
            Value: !Join
              - '/'
              - - http:/
                - !GetAtt LB.DNSName
                - v1
          - Name: ANCHORE_CLI_USER
            Type: PLAINTEXT
            Value: admin
          - Name: ANCHORE_CLI_PASS
            Type: PLAINTEXT
            Value:
              !Join
                  - ""
                  - - "{{resolve:secretsmanager:"
                    - !Ref AdminPassword
                    - :SecretString:::}}
      Name: !Join [ '-', [ !Ref EnvironmentName, 'scan', 'image'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec_vuln.yml
      
  #### CodeBuild Project - Publish Image ####

  CodeBuildPublishProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Join [ '-', [ !Ref EnvironmentName, 'sample'  ] ]
      Name: !Join [ '-', [ !Ref EnvironmentName, 'publish'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec_push.yml

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup


  # AnchoreLB:
  #   Value:
  #     !GetAtt
  #       - LB
  #       - DNSName
  #   Export:
  #     Name: AnchoreLB


